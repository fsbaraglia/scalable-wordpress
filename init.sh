#!/usr/bin/env bash

# Load the project variables into the current shell
source ./project.vars
PROJ_PATH=$(pwd)

# Check the arguments
if [[ ${#} -ne 1 ]]; then
    echo "Please define a single argument as the ENVIRONMENT (e.g dev)!"
    echo "Initialization aborted."
    exit 1
fi

# Define the environment (dev,...,prod)
ENV=$1
ENV_PATH="${PROJ_PATH}/environments/${ENV}"
if [[ ! -d ${ENV_PATH} ]]; then
    echo "The environment '${ENV}' does NOT exist under 'environments' directory."
    echo "It will be created in the path '${ENV_PATH}'"
    echo "The config file is automatically generated by the script. However, the variables in 'variables.tfvars' should be updated."
    echo -e "env=\"dev\"\nregion=\"${AWS_REGION}\"\ncreate_vpc=true" > ${ENV_PATH}/variables.tfvars
fi

# The path of the ssh key for init module
KEY_NAME='ssh-key'
KEY_DIR="${ENV_PATH}/.secrets"
KEY_FILE="${KEY_DIR}/${KEY_NAME}"

# Make sure the path is existing
mkdir -p ${KEY_DIR}

# Initialize Terraform on the init module
cd ${PROJ_PATH}/init
terraform init

# Select/create the workspace
terraform workspace list | grep $ENV
if [[ "${?}" -eq 0 ]]
then
    terraform workspace select $ENV
else
    terraform workspace new $ENV
fi

# Deploy the init resources
terraform apply -var="aws_profile=${AWS_PROFILE}" -var="aws_region=${AWS_REGION}" \
    -var="env=${ENV}" -var="project_name=${PROJECT}" -var="ssh_key_file=${KEY_FILE}"

# Get required values to update the config file
TF_STATE_BUCKET=$(terraform show | grep terraform_state_bucket | cut -d= -f2 | tr -d ' "' | sed -E "s/[[:cntrl:]]\[[0-9]{1,3}m//g")
TF_STATE_LOCK=$(terraform show | grep terraform_state_dynamodb | cut -d= -f2 | tr -d ' "' | sed -E "s/[[:cntrl:]]\[[0-9]{1,3}m//g")

# Update the config file
echo
echo "The backend.config file in '${ENV_PATH}' is updated."
CONFIG_FILE="${ENV_PATH}/backend.config"
CONFIG_DATA="bucket = \"${TF_STATE_BUCKET}\"\nkey = \"${ENV}/terraform.tfstate\"\ndynamodb_table = \"${TF_STATE_LOCK}\"\nprofile = \"${AWS_PROFILE}\""
echo -e ${CONFIG_DATA} > ${CONFIG_FILE}
